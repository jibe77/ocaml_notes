(* 
  Si tu veux "modifier" une valeur, tu ne la changes pas : tu crÃ©es une NOUVELLE valeur. 
  En OCaml, tout est immuable par dÃ©faut.
  ğŸ‘‰ SÃ©curitÃ© :
  Si une valeur ne change pas, ton programme est plus prÃ©visible â†’ moins de bugs.
  ğŸ‘‰ SimplicitÃ© :
  Moins besoin de penser Ã  "qui a changÃ© quoi".
  ğŸ‘‰ ParallÃ©lisme :
  Pas besoin de synchroniser des variables quand on fait du code concurrent.

  En OCaml, si tu veux ce comportement, tu dois le faire explicitement avec ref :
*)

let x = ref 5;;
x := 10;;
Printf.printf "%d\n" !x;;

(* En OCaml, les listes sont aussi immuables : *)

let l1 = [1; 2; 3];;

let l2 = 0 :: l1 ;;   (* l2 = [0; 1; 2; 3] *)

(* 
  l1 n'a PAS changÃ© ! l1 est toujours [1; 2; 3] 
  ğŸ‘‰ Quand tu "ajoutes" un Ã©lÃ©ment, tu crÃ©es une nouvelle liste.
  Lâ€™ancienne liste nâ€™est pas modifiÃ©e.
*)

 

(* arbres, ensembles immuables *)
(*
üîç Diff√©rence de philosophie
Paradigme	        Philosophie	√âtat / variables
Imp√©ratif (Java)	Donner des instructions : "fais ceci, puis cela"	On modifie des variables (√©tat mutable)
Fonctionnel (OCaml)	Exprimer des transformations de donn√©es	Pas de variables modifi√©es (√©tat immuable), on cr√©e des nouvelles valeurs

üìù R√©sum√© des diff√©rences

Aspect	Java (imp√©ratif)	OCaml (fonctionnel)
Variables	mutables (somme modifi√©e)	immutables (on calcule une nouvelle valeur)
Contr√¥le de flux	boucle for	fonction d‚Äôordre sup√©rieur (fold_left)
Pens√©e	"comment le faire, √©tape par √©tape"	"quelle transformation je veux appliquer aux donn√©es"


C‚Äôest un exemple simple mais tr√®s repr√©sentatif car en imp√©ratif on fait une boucle, et en fonctionnel on "plie" la liste.

public class Main {
    public static void main(String[] args) {
        int[] liste = {1, 2, 3, 4, 5};
        int somme = 0;

        for (int i = 0; i < liste.length; i++) {
            somme = somme + liste[i];
        }

        System.out.println("Somme = " + somme);
    }
}

Version fonctionnelle avec List.fold_left : 
*)
let liste = [1; 2; 3; 4; 5]

let somme = List.fold_left (fun acc x -> acc + x) 0 liste

let () = Printf.printf "Somme = %d\n" somme

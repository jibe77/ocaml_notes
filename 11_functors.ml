(* 

ðŸ‘‰ Un foncteur est un module paramÃ©trÃ© par un autre module.

âœ… Câ€™est comme une fonction,
âœ… Mais au lieu de prendre des valeurs en argument,
âœ… Elle prend un module en argument, et retourne un nouveau module.

Pourquoi câ€™est utile ?
âœ… Pour gÃ©nÃ©rer des modules personnalisÃ©s
âœ… Pour factoriser du code
âœ… Pour Ã©crire des bibliothÃ¨ques gÃ©nÃ©riques
âœ… Pour appliquer le principe DRY ("Donâ€™t Repeat Yourself")
*)
(* On dÃ©finit un module signature (interface) pour le module en paramÃ¨tre *)
module type COMPARABLE = sig
  type t
  val compare : t -> t -> int
end

(* On Ã©crit un foncteur qui prend module C de type COMPARABLE*)
module MakeSet (C : COMPARABLE) = struct
  let equal x y = (C.compare x y) = 0
end

module IntCompare = struct
  type t = int
  let compare x y = x - y
end

module IntSet = MakeSet(IntCompare)

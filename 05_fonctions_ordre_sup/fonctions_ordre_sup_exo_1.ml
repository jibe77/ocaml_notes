(*

Impl√©menter une fonction qui compare deux listes.

*) 

(*
Elle prend une fonction f et deux listes xs et ys.
Elle applique f √† chaque paire (x, y) de xs et ys, jusqu'√† ce qu‚Äôune des deux listes soit vide.
Elle renvoie une liste de r√©sultats f x y.
üîç Ex. :
zipWith (+) [1; 2; 3] [10; 20; 30] ‚Üí [11; 22; 33]
*)
let rec zipWith f xs ys = 
  match(xs,ys) with
  | ([],_) | (_,[]) -> []
  | (x :: xs', y :: ys') -> f x y :: zipWith f xs' ys'

let eql xs ys =
  let condition x y = x = y in
  let zipped = zipWith condition xs ys in (* zipped est la liste des comparaisons √©l√©ment par √©l√©ment : [true; true; false; ...]. *)
  let lengths_equal = List.length xs = List.length ys in (* lengths_equal v√©rifie que les deux listes ont la m√™me longueur *)
  lengths_equal && List.fold_left (&&) true zipped (* List.fold_left (&&) true zipped retourne true seulement si tous les √©l√©ments sont true. *)
  (* R√©sultat final : true si toutes les paires sont √©gales et les listes ont m√™me longueur *)
  
let list1 = [1; 2; 3; 4; 5];;
let list2 = [1; 2; 3; 4; 5];;
let list3 = [1; 2; 3; 4; 6];;

let result1 = eql list1 list2;;
let result2 = eql list1 list3;;

Printf.printf "Are list1 and list2 equal? %b\n" result1;;
Printf.printf "Are list1 and list3 equal? %b\n" result2;;



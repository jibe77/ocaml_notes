(* 
Une fonction est dite rÃ©cursive terminale (ou tail-recursive en anglais) si lâ€™appel 
rÃ©cursif est la toute derniÃ¨re chose que fait la fonction.

ConcrÃ¨tement :
Il nâ€™y a plus dâ€™opÃ©ration aprÃ¨s lâ€™appel rÃ©cursif.
Le compilateur peut alors remplacer lâ€™appel rÃ©cursif par une simple boucle â†’ pas de consommation de pile supplÃ©mentaire
*)

(* 
  Voici un exemple simple non optimisÃ©.
  Ici, le + x est fait aprÃ¨s le retour de somme xs â†’ pas terminale.
*)
let rec somme liste =
  match liste with
  | [] -> 0
  | x :: xs -> x + somme xs   (* addition aprÃ¨s le retour de l'appel *)

(*  
  Voici l'exemple optimisÃ©. 

  Ici :
    aux rappelle aux (acc + x) xs
    Lâ€™appel est en derniÃ¨re position â†’ rÃ©cursivitÃ© terminale
    Le compilateur OCaml va optimiser cela en boucle â†’ aucun risque de stack overflow, mÃªme pour des listes trÃ¨s longues.
*)
let somme liste =
  let rec aux acc liste =
    match liste with
    | [] -> acc
    | x :: xs -> aux (acc + x) xs
  in
  aux 0 liste

(* 
ğŸ‘‰ En OCaml (et en gÃ©nÃ©ral en FP), on utilise beaucoup la rÃ©cursion au lieu des boucles for / while.
âœ… Si on Ã©crit les fonctions rÃ©cursives en rÃ©cursivitÃ© terminale, elles sont aussi efficaces quâ€™une boucle en C ou Java.
ğŸš« Si on ne le fait pas â†’ risque de Stack overflow sur de grosses structures.
*)
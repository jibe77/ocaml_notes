(*
    * Comprendre le GC de la VM OCaml
    * Allocation automatique
    * Immutabilit√© comme outil de s√ªret√© m√©moire
    * Profiler le GC (`ocamlprof`, `ocp-memprof`)
*)

(* 
OCaml utilise un ramasse-miettes (GC) automatique pour g√©rer la m√©moire. Il est :
    G√©n√©rationnel : divise les objets selon leur √¢ge
    Incr√©mental et coop√©ratif : √©vite les longues pauses, fonctionne avec le programme
    Compacteur : r√©organise la m√©moire pour √©viter la fragmentation (dans le major heap)

Deux grandes zones m√©moire :
    Minor heap	Allocation tr√®s rapide d'objets r√©cents	Collecte fr√©quente (mineure)
    Major heap	Objets √† dur√©e de vie longue	Collecte moins fr√©quente (majeure), mais plus co√ªteuse

*)

(* 
Allocation automatique:
En OCaml, tu n‚Äôas pas √† allouer ou lib√©rer explicitement la m√©moire (pas de malloc ou free comme en C).

Caract√©ristiques :
Toute valeur complexe (liste, tuple, closure‚Ä¶) est automatiquement allou√©e dans le minor heap
Les valeurs simples (entiers, bool√©ens, float non box√©) sont stock√©es directement en registre ou sur la pile

‚ö†Ô∏è Les allocations rapides sont tr√®s efficaces mais g√©n√®rent rapidement du garbage ‚Üí d'o√π l‚Äôimportance du GC.
*)

(*
3. Immutabilit√© comme outil de s√ªret√© m√©moire
OCaml est par d√©faut un langage fonctionnel avec des valeurs immuables, ce qui apporte :

‚úÖ S√©curit√© m√©moire
    Pas de modification de donn√©es partag√©es
    √âvite les pointeurs sauvages, race conditions, segfaults
‚úÖ Facilit√© du GC
    Si une structure est immuable, et n‚Äôest plus r√©f√©renc√©e, elle peut √™tre nettoy√©e sans risque.

let l1 = [1; 2; 3]
let l2 = 0 :: l1 (* l1 est r√©utilis√©e, pas copi√©e ni modifi√©e *)

‚û°Ô∏è Pas de duplication inutile, pas de fuite m√©moire, comportement pr√©visible.
*)

(*
üîπ 4. Profiler le GC (ocamlprof, ocp-memprof)
    Ces outils aident √† analyser les performances et comprendre les allocations m√©moire.
    ocamlprof :
        Sert surtout au profilage de couverture (quelles fonctions sont appel√©es, combien de fois)
        Peu utile pour le profil m√©moire
    
    ocp-memprof (plus pertinent ici) :
        Outil de profilage m√©moire avanc√© cr√©√© par OCamlPro
        Permet de :
        Voir o√π sont faites les allocations
        Identifier les fuites m√©moire
        Suivre les co√ªts d‚Äôallocation par fonction

    ocp-memprof run ./mon_programme
    ocp-memprof report

*)
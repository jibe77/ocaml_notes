(* 
  ğŸ‘‰ Une structure persistante est une structure de donnÃ©es qui ne disparaÃ®t pas ni ne change quand tu la modifies :
  âœ… Au lieu de modifier lâ€™ancienne version, on crÃ©e une nouvelle version,
  âœ… En rÃ©utilisant une grande partie de lâ€™ancienne pour ne pas consommer trop de mÃ©moire.
*)

let l1 = [1; 2; 3]
let l2 = 0 :: l1

(*
  Ici :
  l1 est [1; 2; 3]
  l2 est [0; 1; 2; 3]
  ğŸ‘‰ La liste l1 nâ€™a pas changÃ©.
  ğŸ‘‰ l2 rÃ©utilise le mÃªme suffixe [1; 2; 3] que l1

  â†’ Les deux versions existent en parallÃ¨le â†’ câ€™est persistant.

  ğŸ‘‰ Câ€™est ce qui rend la programmation fonctionnelle fluide et sÃ»re :
  âœ… On ne casse pas les donnÃ©es partagÃ©es.
  âœ… On peut facilement revenir en arriÃ¨re.
  âœ… On compose les transformations.
*)
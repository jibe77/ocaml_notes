(*
Pourquoi a-t-on besoin de mutex ?
Parce que si plusieurs threads modifient les mÃªmes variables en mÃªme temps, on peut avoir des erreurs.
Exemple classique (erreur de "race condition") :
*)
let counter = ref 0

Thread.create (fun () -> for _ = 1 to 1_000_000 do incr counter done) ()
Thread.create (fun () -> for _ = 1 to 1_000_000 do incr counter done) ()
(*
ğŸ‘‰ On sâ€™attend Ã  ce que counter vaille 2_000_000 Ã  la fin.
Mais en rÃ©alitÃ©, sans protection, le rÃ©sultat sera faux ! Pourquoi ?
Parce que incr counter nâ€™est pas une opÃ©ration atomique â†’ plusieurs threads peuvent la faire en mÃªme temps et Ã©craser le rÃ©sultat de lâ€™autre.

La solution â†’ mutex
Un mutex (abrÃ©viation de mutual exclusion) est un objet qui permet de dire :
ğŸ‘‰ un seul thread Ã  la fois peut accÃ©der Ã  une section critique du code.
Avec mutex :

*)

let counter = ref 0
let mutex = Mutex.create ()

let incr_counter () =
  Mutex.lock mutex;
  counter := !counter + 1;
  Mutex.unlock mutex

Thread.create (fun () -> for _ = 1 to 1_000_000 do incr_counter () done) ()
Thread.create (fun () -> for _ = 1 to 1_000_000 do incr_counter () done) ()

(*
DÃ©tail :
Thread + Mutex = vrais threads OS (comme en Java, C, etc.).
Lwt = "threads lÃ©gers" â†’ pas de threads systÃ¨me â†’ pas de mutex nÃ©cessaire si tu restes dans lâ€™univers Lwt.
Domainslib (OCaml 5) = parallÃ©lisme moderne avec "domains" â†’ lÃ  tu utilises Mutex aussi.
*)
(*
  Le currying est un concept fondamental en programmation fonctionnelle â€” et en OCaml, câ€™est automatique.

ðŸ‘‰Le currying consiste Ã  transformer une fonction qui prend plusieurs arguments en une 
  suite de fonctions qui prennent chacune un seul argument.
*)

(* Supposons quâ€™on ait une fonction pour additionner 2 nombres : *)
let addition x y = x + y

(* 
Cette fonction :
ne prend pas "vraiment" 2 arguments en mÃªme temps
Elle est en fait vue par OCaml comme :
*)

let addition = fun x -> (fun y -> x + y)

(* ðŸ‘‰ Câ€™est une fonction qui prend x et renvoie une fonction qui prend y. *)

let add5 = addition 5    (* c'est une fonction : add5 y = 5 + y *)

let resultat = add5 3    (* 5 + 3 = 8 *)

print_int(resultat)

(*
âœ… RÃ©utiliser facilement des fonctions en fixant des arguments â†’ on crÃ©e des fonctions plus spÃ©cialisÃ©es.
âœ… TrÃ¨s utile avec les fonctions dâ€™ordre supÃ©rieur.

En OCaml, le currying est automatique 

let f x y z = ...

Est automatiquement compris comme :

let f = fun x -> fun y -> fun z -> ...
*)

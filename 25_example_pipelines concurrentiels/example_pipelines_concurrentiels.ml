(* 

Un pipeline concurrentiel est un modÃ¨le dâ€™exÃ©cution oÃ¹ :
Un traitement est divisÃ© en Ã©tapes successives (comme une chaÃ®ne de montage)
Chaque Ã©tape est exÃ©cutÃ©e indÃ©pendamment dans un thread, processus ou coroutine
Les donnÃ©es circulent entre les Ã©tapes, souvent via des files (queues)
Chaque Ã©tape peut fonctionner en parallÃ¨le avec les autres â†’ gain de performance

Exemple concret (mÃ©taphore usine) :
Supposons une fabrique de pizzas :
Ã‰tape 1 : prÃ©paration de la pÃ¢te
Ã‰tape 2 : mise en garniture
Ã‰tape 3 : cuisson
Ã‰tape 4 : emballage
Chaque Ã©tape peut Ãªtre exÃ©cutÃ©e par une unitÃ© distincte (thread), et pendant qu'une pizza cuit, une autre est dÃ©jÃ  en prÃ©paration.

ðŸš€ Pourquoi utiliser un pipeline concurrentiel en OCaml ?
Pour traiter un flux de donnÃ©es de maniÃ¨re efficace (ex : streaming, transformation de fichiers, serveur rÃ©seau)
Pour profiter du parallÃ©lisme (avec Threads ou Domainslib)
Pour gagner du temps : chaque Ã©tape tourne dÃ¨s quâ€™elle a de quoi travailler, sans attendre la fin de la prÃ©cÃ©dente

ðŸ”§ Objectif du pipeline (mÃªme que prÃ©cÃ©demment)
GÃ©nÃ¨re les nombres de 1 Ã  5
Double chaque nombre
Affiche le rÃ©sultat
Mais cette fois avec Lwt_stream, sans threads systÃ¨me ni mutex : tout est asynchrone, non bloquant.

ðŸŽ¯ Objectif
On va simuler une chaÃ®ne de production de pizzas en 3 Ã©tapes :
PrÃ©paration (la pÃ¢te est faÃ§onnÃ©e)
Cuisson (on la fait cuire)
Emballage (on met la pizza dans une boÃ®te)
Chaque Ã©tape est une fonction dans un pipeline asynchrone, basÃ©e sur Lwt_stream.

*)

open Lwt.Infix

type pizza = {
  id : int;
  state : string;
}

(* Ã‰tape 1 : prÃ©paration *)
let prepare () =
  let stream, push = Lwt_stream.create () in
  let rec loop n =
    if n > 5 then (
      push None;
      Lwt.return_unit
    ) else (
      let p = { id = n; state = "pÃ¢te prÃ©parÃ©e" } in
      Lwt_io.printf "[PrÃ©paration] Pizza %d\n%!" p.id >>= fun () ->
      push (Some p);
      Lwt_unix.sleep 0.5 >>= fun () ->
      loop (n + 1)
    )
  in
  Lwt.async (fun () -> loop 1);
  Lwt.return stream

(* Ã‰tape 2 : cuisson *)
let cuisson stream =
  Lwt_stream.map_s (fun pizza ->
    let cooked = { pizza with state = "cuite" } in
    Lwt_io.printf "[Cuisson] Pizza %d\n%!" pizza.id >>= fun () ->
    Lwt_unix.sleep 0.7 >>= fun () ->
    Lwt.return cooked
  ) stream

(* Ã‰tape 3 : emballage *)
let emballage stream =
  Lwt_stream.iter_s (fun pizza ->
    let final = { pizza with state = "emballÃ©e" } in
    Lwt_io.printf "[Emballage] Pizza %d : %s\n%!" final.id final.state
  ) stream

let () =
  Lwt_main.run (
    prepare () >>= fun s1 ->
    let s2 = cuisson s1 in
    emballage s2
  )

  (* 
      ocamlfind ocamlopt -linkpkg -package lwt.unix -o pizza_pipeline pizza_pipeline.ml
  *)
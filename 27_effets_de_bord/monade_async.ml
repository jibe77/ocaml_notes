(*
Les monades asynchrones permettent de g√©rer des op√©rations qui prennent du temps 
(comme lire un fichier, faire une requ√™te r√©seau...) sans bloquer le programme. 
En OCaml, cela se fait avec des monades qui repr√©sentent une "valeur future".

Une monade asynchrone est une sorte de promesse :
‚ÄúJe n‚Äôai pas encore la valeur, mais quand je l‚Äôaurai, je ferai quelque chose avec.‚Äù
*)

(* une computation asynchrone qui renverra un 'a plus tard 

type 'a Lwt.t
*)

(*
2. Fonctions monadiques
Lwt.return : cr√©e une promesse r√©solue imm√©diatement
Lwt.bind (ou let* avec Lwt) : cha√Æne deux promesses
Lwt_main.run : ex√©cute le programme et attend le r√©sultat
*)

open Lwt.Infix  (* active let* et >>= *)

let somme_async x y =
  let%lwt a = Lwt.return x in
  let%lwt b = Lwt.return y in
  Lwt.return (a + b)

let () =
  let result = Lwt_main.run (somme_async 3 4) in
  Printf.printf "R√©sultat : %d\n" result

  (*
  üîÑ Ce qu‚Äôil se passe r√©ellement :
      Lwt.return x = cr√©e une t√¢che qui renvoie x imm√©diatement
      let%lwt a = ... attend la fin de la t√¢che, puis extrait la valeur
      Le reste du calcul continue quand les r√©sultats sont disponibles
      Lwt_main.run d√©marre la boucle et attend la fin du dernier calcul
  *)

  (* 
    compilation : 
    % ocamlfind ocamlopt -linkpkg -package lwt.unix,lwt_ppx -o monade_async monade_async.ml
  *)